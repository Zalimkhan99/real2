import EventTarget from './eventtarget';
export declare const internalEventSymbol: unique symbol;
export interface EventInit {
    bubbles?: boolean;
    cancelable?: boolean;
    composed?: boolean;
}
export declare class InternalEvent {
    canceled: boolean;
    immediatePropagationStoped: boolean;
    initialized: boolean;
    propagationStoped: boolean;
    bubbles: boolean;
    cancelable: boolean;
    eventPhase: number;
    target: EventTarget | null;
    timeStamp: number;
    type: string;
    constructor(type: string, eventInit: EventInit);
}
/**
 * @see {@link https://dom.spec.whatwg.org/#interface-event DOM Standard - 2.2. Interface Event}
 */
export default class Event {
    static readonly NONE = 0;
    static readonly CAPTURING_PHASE = 1;
    static readonly AT_TARGET = 2;
    static readonly BUBBLING_PHASE = 3;
    readonly NONE = 0;
    readonly CAPTURING_PHASE = 1;
    readonly AT_TARGET = 2;
    readonly BUBBLING_PHASE = 3;
    [internalEventSymbol]: InternalEvent;
    get bubbles(): boolean;
    get cancelable(): boolean;
    get currentTarget(): EventTarget | null;
    get defaultPrevented(): boolean;
    get eventPhase(): number;
    /**
     * @todo Make the value changeable.
     */
    get isTrusted(): boolean;
    get target(): EventTarget | null;
    get timeStamp(): number;
    get type(): string;
    constructor(type: string, eventInit?: EventInit);
    preventDefault(): void;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
}
