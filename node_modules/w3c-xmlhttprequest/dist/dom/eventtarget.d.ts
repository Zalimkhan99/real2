import Event from './event';
interface EventListenerOptions {
    capture?: boolean;
}
interface AddEventListenerOptions extends EventListenerOptions {
    once?: boolean;
    passive?: boolean;
}
interface EventListener {
    (event: Event): void;
}
interface EventListenerObject {
    handleEvent(event: Event): void;
}
declare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;
/**
 * @see {@link https://dom.spec.whatwg.org/#interface-eventtarget DOM Standard - 2.7. Interface EventTarget}
 */
export default class EventTarget {
    #private;
    constructor();
    /**
     * @see {@link https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener DOM Standard - The addEventListener(type, callback, options) method}
     */
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    /**
     * @see {@link https://dom.spec.whatwg.org/#dom-eventtarget-dispatchevent DOM Standard - The dispatchEvent(event) method}
     */
    dispatchEvent(event: Event): boolean;
    /**
     * @see {@link https://dom.spec.whatwg.org/#dom-eventtarget-removeeventlistener DOM Standard - The removeEventListener(type, callback, options) method}
     */
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}
export {};
